import os 
from dotenv import load_dotenv
import asyncio
import time
import json

from wol import send_wol, send_off, send_sleep
from telegram import InlineKeyboardButton, Update, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, ContextTypes
from listen_time import run_udp_port_listener_time


load_dotenv()

pc_mac_address = os.getenv("PC_MAC_ADDRESS")
broadcast_ip = os.getenv("BROADCAST_IP")
telegram_bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
users_env = os.getenv("USERS")

PORT = int(os.getenv('PORT'))
ETHERNET = os.getenv('ETHERNET')

ALLOWED_USERS = []
users_env = str(users_env)[1:-1]
users_env = users_env.split(',')
for i in users_env:
    ALLOWED_USERS.append(int(i))

print(f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {ALLOWED_USERS}")



button_PC_control_data =    [[InlineKeyboardButton("üöÄ turn on", callback_data="turn_on")], 
                            [InlineKeyboardButton("‚ö´Ô∏è turn off", callback_data="turn_off")],
                            [InlineKeyboardButton("üõèÔ∏è sleep", callback_data="sleep")]]

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª /start –∏–ª–∏ –Ω–∞–∂–∏–º–∞–ª –∫–Ω–æ–ø–∫–∏)
active_users = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ü–ö
PC_status = '‚ö´Ô∏è –í—ã–∫–ª—é—á–µ–Ω'
last_packet_time = 0

def is_user_authorized(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."""
    print(f'user_id: {user_id}, list:  {ALLOWED_USERS}')
    return user_id in ALLOWED_USERS

# Define a few command handlers. These usually take the two arguments update and
# context.
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    
    if not is_user_authorized(user.id):
        await update.message.reply_html(
            f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –í–∞—à ID: {user.id}\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    active_users[user.id] = {'query': update.message}
    await update.message.reply_html(
        rf"Hi {user.mention_html()}!",
        reply_markup=InlineKeyboardMarkup(button_PC_control_data),
    )

async def listen_time_forever(context):
    global PC_status, last_packet_time
    loop = asyncio.get_running_loop()
    while True:
        # run_udp_port_listener_time –±–ª–æ–∫–∏—Ä—É—é—â–∞—è, –ø–æ—ç—Ç–æ–º—É –≤ executor
        data, _ = await loop.run_in_executor(
            None, run_udp_port_listener_time, PORT, ETHERNET
        )
        try:
            data_dict = json.loads(data.decode('utf-8'))
            formatted_uptime = data_dict.get('formatted_uptime', 'N/A')
        except Exception:
            data_dict = {}
            formatted_uptime = 'N/A'

        last_packet_time = time.time()
        if PC_status != 'üöÄ –í–∫–ª—é—á–µ–Ω':
            PC_status = 'üöÄ –í–∫–ª—é—á–µ–Ω'
            # –ü–ö –≤–∫–ª—é—á–∏–ª—Å—è ‚Äî —É–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user_id, msg_ctx in active_users.items():
                try:
                    await msg_ctx['query'].edit_message_text(
                        text=f"status: {PC_status}\n–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {formatted_uptime}",
                        reply_markup=InlineKeyboardMarkup(button_PC_control_data),
                    )
                except Exception:
                    pass
        else:
            # –ü–ö —É–∂–µ –≤–∫–ª—é—á—ë–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è
            for user_id, msg_ctx in active_users.items():
                try:
                    await msg_ctx['query'].edit_message_text(
                        text=f"status: {PC_status}\n–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {formatted_uptime}",
                        reply_markup=InlineKeyboardMarkup(button_PC_control_data),
                    )
                except Exception:
                    pass

async def pc_status_timeout_checker(context, timeout=10):
    global PC_status, last_packet_time
    while True:
        await asyncio.sleep(2)
        if PC_status == 'üöÄ –í–∫–ª—é—á–µ–Ω' and (time.time() - last_packet_time > timeout):
            PC_status = '‚ö´Ô∏è –í—ã–∫–ª—é—á–µ–Ω'
            for user_id, msg_ctx in active_users.items():
                try:
                    await msg_ctx['query'].message.reply_html(
                        text=f"status: {PC_status}",
                        reply_markup=InlineKeyboardMarkup(button_PC_control_data),
                    )
                except Exception:
                    pass

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user = query.from_user
    user_id = user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    active_users[user_id] = {'query': query}
    if query.data == "turn_on":
        send_wol(pc_mac_address, broadcast_ip)
        await query.answer()
    elif query.data == "turn_off":
        await query.answer()
        send_off(pc_mac_address, broadcast_ip)
    elif query.data == "sleep":
        await query.answer()
        send_sleep(pc_mac_address, broadcast_ip)
    # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Ä—É—á–Ω—É—é ‚Äî —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—å

async def post_init(app):
    app.create_task(listen_time_forever(app))
    app.create_task(pc_status_timeout_checker(app))

def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(telegram_bot_token).build()
    print(str(application)[:-10])

    
    # on different commands - answer in Telegram
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –∏ —Ç–∞–π–º–∞—É—Ç-–¥–µ—Ç–µ–∫—Ç–æ—Ä
    application.post_init = post_init

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()